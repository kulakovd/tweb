{"version":3,"file":"mediaEditorRenderer.worker-lERkvjiM.js","sources":["src/lib/mediaEditor/webgl/utils/imageTexture.ts","src/lib/mediaEditor/webgl/utils/createProgram.js","src/lib/mediaEditor/webgl/shaders/defaultVert.js","src/lib/mediaEditor/webgl/shaders/defaultFrag.js","src/lib/mediaEditor/webgl/defaultProgram.js","src/lib/mediaEditor/webgl/utils/lazy.ts","src/lib/mediaEditor/webgl/vertex.js","src/lib/mediaEditor/webgl/utils/render.js","src/lib/mediaEditor/webgl/enhanceGenerateLUT.js","src/lib/mediaEditor/webgl/utils/texture.js","src/lib/mediaEditor/webgl/shaders/enhanceColorLookupFrag.js","src/lib/mediaEditor/webgl/enhanceColorLookupProgram.js","src/lib/mediaEditor/webgl/shaders/rgbToHsvFrag.js","src/lib/mediaEditor/webgl/colorConvertProgram.js","src/lib/mediaEditor/processors/enhancePass.ts","src/lib/mediaEditor/webgl/shaders/adjustmentsFrag.js","src/lib/mediaEditor/webgl/adjustmentsProgram.ts","src/lib/mediaEditor/processors/adjustmentsPass.ts","src/lib/mediaEditor/webgl/shaders/sharpenVert.js","src/lib/mediaEditor/webgl/shaders/sharpenFrag.js","src/lib/mediaEditor/webgl/sharpenProgram.ts","src/lib/mediaEditor/processors/sharpenPass.ts","src/lib/mediaEditor/mediaEditorRenderer.worker.ts"],"sourcesContent":["export function createImageTexture(gl: WebGL2RenderingContext, img: TexImageSource) {\n  const currentTexture = gl.getParameter(gl.TEXTURE_BINDING_2D);\n  const texture = gl.createTexture()\n  gl.bindTexture(gl.TEXTURE_2D, texture)\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\n  gl.bindTexture(gl.TEXTURE_2D, currentTexture)\n  return {\n    texture,\n    width: img.width,\n    height: img.height\n  }\n}\n","export function createProgram(gl, vertSource, fragSource) {\n  const vertShader = gl.createShader(gl.VERTEX_SHADER)\n  gl.shaderSource(vertShader, vertSource)\n  gl.compileShader(vertShader)\n\n  if(!gl.getShaderParameter(vertShader, gl.COMPILE_STATUS)) {\n    console.error('Error compiling vertex shader: ' + gl.getShaderInfoLog(vertShader));\n    gl.deleteShader(vertShader);\n    return null;\n  }\n\n  const fragShader = gl.createShader(gl.FRAGMENT_SHADER)\n  gl.shaderSource(fragShader, fragSource)\n  gl.compileShader(fragShader)\n\n  if(!gl.getShaderParameter(fragShader, gl.COMPILE_STATUS)) {\n    console.error('Error compiling fragment shader: ' + gl.getShaderInfoLog(fragShader));\n    gl.deleteShader(fragShader);\n    return null;\n  }\n\n  const program = gl.createProgram()\n  gl.attachShader(program, vertShader)\n  gl.attachShader(program, fragShader)\n  gl.linkProgram(program)\n\n  if(!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    console.error('Error linking program: ' + gl.getProgramInfoLog(program));\n    gl.deleteProgram(program);\n    return null;\n  }\n\n  return program\n}\n","// language=GLSL\nexport const defaultVert = `\n  #version 300 es\n  \n  in vec2 aTextureCoord;\n  in vec4 aVertexPosition;\n  \n  out highp vec2 texCoord;\n  \n  void main() {\n    gl_Position = aVertexPosition;\n    texCoord = aTextureCoord;\n  }\n`.trim();\n","// language=GLSL\nexport const defaultFrag = `\n  #version 300 es\n  \n  precision mediump float;\n  \n  uniform sampler2D uSampler;\n  \n  in highp vec2 texCoord;\n  \n  out vec4 fragColor;\n  \n  void main() {\n      fragColor = texture(uSampler, texCoord);\n  }\n`.trim();\n","import {createProgram} from './utils/createProgram';\nimport {defaultVert} from './shaders/defaultVert';\nimport {defaultFrag} from './shaders/defaultFrag';\n\nexport function createDefaultProgram(ctx, vertexDirection) {\n  const {gl, mapVertices} = ctx\n\n  const program = createProgram(gl, defaultVert, defaultFrag)\n\n  const uSamplerLoc = gl.getUniformLocation(program, 'uSampler')\n  const vertexPositionLoc = gl.getAttribLocation(program, 'aVertexPosition')\n  const texCoordLoc = gl.getAttribLocation(program, 'aTextureCoord')\n\n  function use() {\n    gl.useProgram(program)\n    gl.uniform1i(uSamplerLoc, 0) // texture unit 0\n    mapVertices(vertexPositionLoc, texCoordLoc, vertexDirection)\n  }\n\n  return {\n    program,\n    use\n  }\n}\n","export function lazy<T>(fn: () => T): () => T {\n  let value: T | null = null\n  return () => {\n    if(value === null) {\n      value = fn()\n    }\n    return value\n  }\n}\n","import {lazy} from './utils/lazy';\n\nconst directVertices = new Float32Array([\n  -1.0,  1.0,\n  1.0,  1.0,\n  -1.0, -1.0,\n  1.0, -1.0\n]);\n\n// for flipping the image horizontally\nconst invertVertices = new Float32Array([\n  -1.0,  -1.0,\n  1.0, -1.0,\n  -1.0, 1.0,\n  1.0, 1.0\n]);\n\nconst texVertices = new Float32Array([\n  0.0, 0.0,\n  1.0, 0.0,\n  0.0, 1.0,\n  1.0, 1.0\n]);\n\nfunction createVertexBuffer(gl, vertices) {\n  const vertexBuffer = gl.createBuffer()\n  gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer)\n  gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW)\n  return vertexBuffer\n}\n\nexport const initVertices = (gl) => ({\n  direct: lazy(() => createVertexBuffer(gl, directVertices)),\n  invert: lazy(() => createVertexBuffer(gl, invertVertices)),\n  tex: lazy(() => createVertexBuffer(gl, texVertices))\n});\n","export function render2d(gl) {\n  gl.clearColor(0.0, 0.0, 0.0, 1.0)\n  gl.clear(gl.COLOR_BUFFER_BIT)\n  gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\n}\n","export function createLUTGenerator(gl, binCount, gridWidth, gridHeight) {\n  const totalSegments = gridWidth * gridHeight\n  const defaultClipLimit = 1.25\n\n  // this program does not use shaders (computation is done in JS)\n  return (input) => {\n    const prevTexture = gl.getParameter(gl.TEXTURE_BINDING_2D);\n    const prevFramebuffer = gl.getParameter(gl.FRAMEBUFFER_BINDING);\n\n    const framebuffer = gl.createFramebuffer()\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer)\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, input.texture, 0)\n    gl.viewport(0, 0, input.width, input.height)\n\n    const inputBuffer = new Uint8Array(input.width * input.height * 4);\n    gl.readPixels(0, 0, input.width, input.height, gl.RGBA, gl.UNSIGNED_BYTE, inputBuffer);\n\n    const tileWidth = Math.floor(input.width / gridWidth)\n    const tileHeight = Math.floor(input.height / gridHeight)\n    const tileArea = tileWidth * tileHeight\n    const clipLimit = Math.floor(Math.max(1, defaultClipLimit * tileArea / binCount))\n    const scale = 255 / tileArea\n\n    const bytesPerRow = input.width * 4\n\n    const hist = Array.from({length: totalSegments}, () => new Uint32Array(binCount))\n    const cdfs = Array.from({length: totalSegments})\n    const cdfsMin = Array.from({length: totalSegments}, () => 0)\n    const cdfsMax = Array.from({length: totalSegments}, () => 0)\n\n    const xMul = gridWidth / input.width;\n    const yMul = gridHeight / input.height;\n\n    // Generate histogram for each tile\n    for(let y = 0; y < input.height; y++) {\n      const yOffset = y * bytesPerRow;\n      for(let x = 0; x < input.width; x++) {\n        const index = x * 4 + yOffset;\n\n        const tx = Math.floor(x * xMul);\n        const ty = Math.floor(y * yMul);\n        const t = ty * gridWidth + tx;\n\n        const value = inputBuffer[index + 2];\n        hist[t][value]++;\n      }\n    }\n\n    // Clip and redistribute\n    for(let i = 0; i < totalSegments; i++) {\n      if(clipLimit > 0) {\n        let clipped = 0;\n        for(let j = 0; j < binCount; ++j) {\n          if(hist[i][j] > clipLimit) {\n            clipped += Math.floor(hist[i][j] - clipLimit);\n            hist[i][j] = clipLimit;\n          }\n        }\n\n        const redistBatch = Math.floor(clipped / binCount);\n        const residual = clipped - redistBatch * binCount;\n\n        for(let j = 0; j < binCount; ++j) {\n          hist[i][j] += redistBatch;\n        }\n\n        for(let j = 0; j < residual; ++j) {\n          hist[i][j]++;\n        }\n      }\n\n      cdfs[i] = hist[i].slice(0)\n\n      let hMin = binCount - 1;\n      for(let j = 0; j < hMin; ++j) {\n        if(cdfs[i][j] !== 0) {\n          hMin = j;\n        }\n      }\n\n      let cdf = 0;\n      for(let j = hMin; j < binCount; ++j) {\n        cdf += cdfs[i][j];\n        cdfs[i][j] = Math.floor(Math.min(255, cdf * scale));\n      }\n\n      cdfsMin[i] = cdfs[i][hMin];\n      cdfsMax[i] = cdfs[i][binCount - 1];\n    }\n\n    const resultSize = 4 * binCount * totalSegments;\n    const resultBytesPerRow = 4 * binCount;\n\n    const result = new Uint8Array(resultSize);\n    for(let tile = 0; tile < totalSegments; tile++) {\n      const yOffset = tile * resultBytesPerRow;\n      for(let i = 0; i < binCount; i++) {\n        const index = i * 4 + yOffset;\n        result[index] = cdfs[tile][i];\n        result[index + 1] = cdfsMin[tile];\n        result[index + 2] = cdfsMax[tile];\n      }\n    }\n\n    const resultTexture = gl.createTexture()\n    gl.bindTexture(gl.TEXTURE_2D, resultTexture)\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, binCount, totalSegments, 0, gl.RGBA, gl.UNSIGNED_BYTE, result)\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR)\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR)\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, prevFramebuffer)\n    gl.bindTexture(gl.TEXTURE_2D, prevTexture)\n\n    return resultTexture\n  }\n}\n","export function createEmptyTexture(gl, width, height, params = {}) {\n  const {\n    internalFormat = gl.RGBA,\n    format = gl.RGBA,\n    minFilter = gl.LINEAR,\n    magFilter = gl.LINEAR,\n    // S is for horizontal, T is for vertical (X and Y respectively)\n    wrapS = gl.CLAMP_TO_EDGE,\n    wrapT = gl.CLAMP_TO_EDGE\n  } = params\n\n  const outputTexture = gl.createTexture()\n  gl.bindTexture(gl.TEXTURE_2D, outputTexture)\n  gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, width, height, 0, format, gl.UNSIGNED_BYTE, null)\n\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrapS)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrapT)\n\n  return outputTexture\n}\n","// language=GLSL\nexport const enhanceColorLookupFrag = `\n  #version 300 es\n  \n  precision highp float;\n  \n  uniform sampler2D inputSampler;\n  uniform sampler2D lutSampler;\n  uniform float intensity;\n  \n  in highp vec2 texCoord;\n  \n  out vec4 fragColor;\n  \n  vec3 rgb_to_hsv(vec3 c) {\n      vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n      vec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\n      vec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\n  \n      float d = q.x - min(q.w, q.y);\n      float e = 1.0e-10;\n      return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n  }\n  \n  vec3 hsv_to_rgb(vec3 c) {\n      vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n      vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n      return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n  }\n  \n  float enhance(float value) {\n      const vec2 offset = vec2(0.001953125, 0.03125); // vec2(0.5 / 256.0, 0.5 / 16.0)\n      value = value + offset.x;\n  \n      vec2 coord = (clamp(texCoord, 0.125, 1.0 - 0.125001) - 0.125) * 4.0;\n      vec2 frac = fract(coord);\n      coord = floor(coord); // vec2(0..3, 0..3)\n  \n      // 1.0 / 16.0 = 0.0625\n      float p00 = float(coord.y * 4.0 + coord.x) * 0.0625 + offset.y;\n      float p01 = float(coord.y * 4.0 + coord.x + 1.0) * 0.0625 + offset.y;\n      float p10 = float((coord.y + 1.0) * 4.0 + coord.x) * 0.0625 + offset.y;\n      float p11 = float((coord.y + 1.0) * 4.0 + coord.x + 1.0) * 0.0625 + offset.y;\n  \n      vec3 c00 = texture(lutSampler, vec2(value, p00)).rgb;\n      vec3 c01 = texture(lutSampler, vec2(value, p01)).rgb;\n      vec3 c10 = texture(lutSampler, vec2(value, p10)).rgb;\n      vec3 c11 = texture(lutSampler, vec2(value, p11)).rgb;\n  \n      // r - cdf, g - cdfMin, b - cdfMax\n      float c1 = ((c00.r - c00.g) / (c00.b - c00.g));\n      float c2 = ((c01.r - c01.g) / (c01.b - c01.g));\n      float c3 = ((c10.r - c10.g) / (c10.b - c10.g));\n      float c4 = ((c11.r - c11.g) / (c11.b - c11.g));\n  \n      float c1_2 = mix(c1, c2, frac.x);\n      float c3_4 = mix(c3, c4, frac.x);\n  \n      return mix(c1_2, c3_4, frac.y);\n  }\n  \n  void main() {\n      vec4 texel = texture(inputSampler, texCoord);\n      vec4 hsv = texel;\n  \n      hsv.y = min(1.0, hsv.y * 1.2);\n      hsv.z = min(1.0, enhance(hsv.z) * 1.1);\n  \n      fragColor = vec4(hsv_to_rgb(mix(texel.xyz, hsv.xyz, intensity)), texel.w);\n  }\n`.trim();\n","import {createProgram} from './utils/createProgram.js';\nimport {render2d} from './utils/render.js';\nimport {createEmptyTexture} from './utils/texture.js';\nimport {defaultVert} from './shaders/defaultVert';\nimport {enhanceColorLookupFrag} from './shaders/enhanceColorLookupFrag';\n\nexport function createEnhanceColorLookupProgram(ctx) {\n  const {gl, mapVertices} = ctx\n\n  const program = createProgram(gl, defaultVert, enhanceColorLookupFrag)\n\n  const colorSamplerLoc = gl.getUniformLocation(program, 'inputSampler')\n  const lutSamplerLoc = gl.getUniformLocation(program, 'lutSampler')\n\n  const intensityLoc = gl.getUniformLocation(program, 'intensity')\n\n  const vertexPositionLoc = gl.getAttribLocation(program, 'aVertexPosition')\n  const texCoordLoc = gl.getAttribLocation(program, 'aTextureCoord')\n\n  return (params) => {\n    const {input, lutTexture, intensity} = params\n\n    const prevTexture = gl.getParameter(gl.TEXTURE_BINDING_2D);\n    const prevFramebuffer = gl.getParameter(gl.FRAMEBUFFER_BINDING);\n    const prevProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n\n    gl.useProgram(program)\n\n    const outputTexture = createEmptyTexture(gl, input.width, input.height)\n\n    const framebuffer = gl.createFramebuffer()\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer)\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, outputTexture, 0)\n    gl.viewport(0, 0, input.width, input.height)\n\n    gl.activeTexture(gl.TEXTURE0)\n    gl.bindTexture(gl.TEXTURE_2D, input.texture)\n\n    gl.activeTexture(gl.TEXTURE1)\n    gl.bindTexture(gl.TEXTURE_2D, lutTexture)\n\n    gl.uniform1i(colorSamplerLoc, 0) // texture unit 0\n    gl.uniform1i(lutSamplerLoc, 1) // texture unit 1\n\n    gl.uniform1f(intensityLoc, intensity)\n\n    mapVertices(vertexPositionLoc, texCoordLoc)\n\n    render2d(gl)\n\n    gl.bindTexture(gl.TEXTURE_2D, prevTexture)\n    gl.bindFramebuffer(gl.FRAMEBUFFER, prevFramebuffer)\n    gl.useProgram(prevProgram)\n\n    return outputTexture\n  }\n}\n","// language=GLSL\nexport const rgbToHsvFrag = `\n  #version 300 es\n  \n  precision mediump float;\n  \n  uniform sampler2D uSampler;\n  \n  in highp vec2 texCoord;\n  \n  out vec4 fragColor;\n  \n  vec3 rgb_to_hsv(vec3 c) {\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\n    vec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\n  \n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n  }\n  \n  void main() {\n    vec4 c = texture(uSampler, texCoord);\n    fragColor = vec4(rgb_to_hsv(c.rgb).rgb, 1.0);\n  }\n`.trim();\n","import {defaultVert} from './shaders/defaultVert';\nimport {rgbToHsvFrag} from './shaders/rgbToHsvFrag';\nimport {createProgram} from './utils/createProgram.js';\nimport {render2d} from './utils/render.js';\nimport {createEmptyTexture} from './utils/texture.js';\n\nexport function createColorConvertProgram(ctx) {\n  const {gl, mapVertices} = ctx\n\n  const program = createProgram(gl, defaultVert, rgbToHsvFrag)\n\n  const uSamplerLoc = gl.getUniformLocation(program, 'uSampler')\n\n  const vertexPositionLoc = gl.getAttribLocation(program, 'aVertexPosition')\n  const texCoordLoc = gl.getAttribLocation(program, 'aTextureCoord')\n\n  return (input) => {\n    const prevTexture = gl.getParameter(gl.TEXTURE_BINDING_2D);\n    const prevFramebuffer = gl.getParameter(gl.FRAMEBUFFER_BINDING);\n    const prevProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n\n    gl.useProgram(program)\n\n    const outputTexture = createEmptyTexture(gl, input.width, input.height)\n\n    const framebuffer = gl.createFramebuffer()\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer)\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, outputTexture, 0)\n    gl.viewport(0, 0, input.width, input.height)\n\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, input.texture)\n\n    gl.uniform1i(uSamplerLoc, 0) // texture unit 0\n\n    mapVertices(vertexPositionLoc, texCoordLoc)\n\n    render2d(gl)\n\n    gl.bindTexture(gl.TEXTURE_2D, prevTexture)\n    gl.bindFramebuffer(gl.FRAMEBUFFER, prevFramebuffer)\n    gl.useProgram(prevProgram)\n\n    return outputTexture\n  }\n}\n","import {MediaEditorValues} from '../mediaEditorValues'\nimport {createLUTGenerator} from '../webgl/enhanceGenerateLUT'\nimport {createEnhanceColorLookupProgram} from '../webgl/enhanceColorLookupProgram'\nimport {createColorConvertProgram} from '../webgl/colorConvertProgram'\nimport {Texture} from '../webgl/webgl'\nimport {MediaEditorRenderingContext} from '../webgl/context'\n\nconst histBinCount = 256\nconst gridWidth = 4\nconst gridHeight = 4\n\nexport function createEnhancePass(ctx: MediaEditorRenderingContext): (input: Texture, values: MediaEditorValues) => Texture {\n  const colorConvertProgram = createColorConvertProgram(ctx)\n  const generateLUT = createLUTGenerator(ctx.gl, histBinCount, gridWidth, gridHeight)\n  const enhanceColorLookupProgram = createEnhanceColorLookupProgram(ctx)\n\n  return (input: Texture, values: MediaEditorValues) => {\n    const hsvTexture: WebGLTexture = colorConvertProgram(input)\n\n    const lookupTexture: WebGLTexture = generateLUT({\n      texture: hsvTexture,\n      width: input.width,\n      height: input.height\n    })\n\n    const outputTexture = enhanceColorLookupProgram({\n      input: {\n        texture: hsvTexture,\n        width: input.width,\n        height: input.height\n      },\n      lutTexture: lookupTexture,\n      intensity: values.filters.enhance / 100\n    })\n\n    return {\n      texture: outputTexture,\n      width: input.width,\n      height: input.height\n    }\n  }\n}\n","// language=GLSL\nexport const adjustmentsFrag = `\n  #version 300 es\n  \n  precision lowp float;\n  \n  const mediump vec3 hsLuminanceWeighting = vec3(0.3, 0.3, 0.3);\n  const mediump vec3 satLuminanceWeighting = vec3(0.2126, 0.7152, 0.0722);\n  const lowp float permTexUnit = 1.0 / 256.0;\n  const lowp float permTexUnitHalf = 0.5 / 256.0;\n  const lowp float grainsize = 2.3;\n  \n  uniform sampler2D sTexture;\n  \n  uniform highp float width;\n  uniform highp float height;\n  \n  uniform sampler2D curvesImage;\n  uniform lowp float skipTone;\n  \n  uniform lowp float exposure;\n  uniform lowp float contrast;\n  uniform lowp float saturation;\n  uniform lowp float warmth;\n  uniform lowp float fadeAmount;\n  uniform lowp float highlights;\n  uniform lowp float shadows;\n  uniform lowp float vignette;\n  uniform lowp float grain;\n  \n  const lowp float shadowsTintIntensity = 0.0;\n  const lowp vec3 shadowsTintColor = vec3(0.0, 0.0, 0.0);\n  const lowp float highlightsTintIntensity = 0.0;\n  const lowp vec3 highlightsTintColor = vec3(0.0, 0.0, 0.0);\n  \n  in highp vec2 texCoord;\n  \n  out lowp vec4 fragColor;\n  \n  highp float getLuma(highp vec3 rgbP) {\n    return (0.299 * rgbP.r) + (0.587 * rgbP.g) + (0.114 * rgbP.b);\n  }\n  \n  lowp vec3 rgbToHsv(lowp vec3 c) {\n    highp vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    highp vec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\n    highp vec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\n    highp float d = q.x - min(q.w, q.y);\n    highp float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n  }\n  \n  lowp vec3 hsvToRgb(lowp vec3 c) {\n    highp vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    highp vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n  }\n  \n  highp vec3 rgbToHsl(highp vec3 color) {\n    highp vec3 hsl;\n    highp float fmin = min(min(color.r, color.g), color.b);\n    highp float fmax = max(max(color.r, color.g), color.b);\n    highp float delta = fmax - fmin;\n    hsl.z = (fmax + fmin) / 2.0;\n    if (delta == 0.0) {\n      hsl.x = 0.0;\n      hsl.y = 0.0;\n    } else {\n      if (hsl.z < 0.5) {\n          hsl.y = delta / (fmax + fmin);\n      } else {\n          hsl.y = delta / (2.0 - fmax - fmin);\n      }\n      highp float deltaR = (((fmax - color.r) / 6.0) + (delta / 2.0)) / delta;\n      highp float deltaG = (((fmax - color.g) / 6.0) + (delta / 2.0)) / delta;\n      highp float deltaB = (((fmax - color.b) / 6.0) + (delta / 2.0)) / delta;\n      if (color.r == fmax) {\n          hsl.x = deltaB - deltaG;\n      } else if (color.g == fmax) {\n          hsl.x = (1.0 / 3.0) + deltaR - deltaB;\n      } else if (color.b == fmax) {\n          hsl.x = (2.0 / 3.0) + deltaG - deltaR;\n      }\n      if (hsl.x < 0.0) {\n          hsl.x += 1.0;\n      } else if (hsl.x > 1.0) {\n          hsl.x -= 1.0;\n      }\n    }\n    return hsl;\n  }\n  \n  highp float hueToRgb(highp float f1, highp float f2, highp float hue) {\n    if (hue < 0.0) {\n      hue += 1.0;\n    } else if (hue > 1.0) {\n      hue -= 1.0;\n    }\n    \n    highp float res;\n    \n    if ((6.0 * hue) < 1.0) {\n      res = f1 + (f2 - f1) * 6.0 * hue;\n    } else if ((2.0 * hue) < 1.0) {\n      res = f2;\n    } else if ((3.0 * hue) < 2.0) {\n      res = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;\n    } else {\n      res = f1;\n    }\n    \n    return res;\n  }\n  \n  highp vec3 hslToRgb(highp vec3 hsl) {\n    if (hsl.y == 0.0) {\n      return vec3(hsl.z);\n    } else {\n      highp float f2;\n      if (hsl.z < 0.5) {\n        f2 = hsl.z * (1.0 + hsl.y);\n      } else {\n        f2 = (hsl.z + hsl.y) - (hsl.y * hsl.z);\n      }\n      highp float f1 = 2.0 * hsl.z - f2;\n      return vec3(hueToRgb(f1, f2, hsl.x + (1.0 / 3.0)), hueToRgb(f1, f2, hsl.x), hueToRgb(f1, f2, hsl.x - (1.0 / 3.0)));\n    }\n  }\n  \n  highp vec3 rgbToYuv(highp vec3 inP) {\n    highp float luma = getLuma(inP);\n    return vec3(luma, (1.0 / 1.772) * (inP.b - luma), (1.0 / 1.402) * (inP.r - luma));\n  }\n  \n  lowp vec3 yuvToRgb(highp vec3 inP) {\n    return vec3(1.402 * inP.b + inP.r, (inP.r - (0.299 * 1.402 / 0.587) * inP.b - (0.114 * 1.772 / 0.587) * inP.g), 1.772 * inP.g + inP.r);\n  }\n  \n  lowp float easeInOutSigmoid(lowp float value, lowp float strength) {\n    if (value > 0.5) {\n      return 1.0 - pow(2.0 - 2.0 * value, 1.0 / (1.0 - strength)) * 0.5;\n    } else {\n      return pow(2.0 * value, 1.0 / (1.0 - strength)) * 0.5;\n    }\n  }\n  \n  lowp vec3 applyLuminanceCurve(lowp vec3 pixel) {\n    highp float index = floor(clamp(pixel.z / (1.0 / 200.0), 0.0, 199.0));\n    pixel.y = mix(0.0, pixel.y, smoothstep(0.0, 0.1, pixel.z) * (1.0 - smoothstep(0.8, 1.0, pixel.z)));\n    pixel.z = texture(curvesImage, vec2(1.0 / 200.0 * index, 0)).a;\n    return pixel;\n  }\n  \n  lowp vec3 applyRGBCurve(lowp vec3 pixel) {\n    highp float index = floor(clamp(pixel.r / (1.0 / 200.0), 0.0, 199.0));\n    pixel.r = texture(curvesImage, vec2(1.0 / 200.0 * index, 0)).r;\n    index = floor(clamp(pixel.g / (1.0 / 200.0), 0.0, 199.0));\n    pixel.g = clamp(texture(curvesImage, vec2(1.0 / 200.0 * index, 0)).g, 0.0, 1.0);\n    index = floor(clamp(pixel.b / (1.0 / 200.0), 0.0, 199.0));\n    pixel.b = clamp(texture(curvesImage, vec2(1.0 / 200.0 * index, 0)).b, 0.0, 1.0);\n    return pixel;\n  }\n  \n  highp vec3 fadeAdjust(highp vec3 color, highp float fadeVal) {\n    return (color * (1.0 - fadeVal)) + ((color + (vec3(-0.9772) * pow(vec3(color), vec3(3.0)) + vec3(1.708) * pow(vec3(color), vec3(2.0)) + vec3(-0.1603) * vec3(color) + vec3(0.2878) - color * vec3(0.9))) * fadeVal);\n  }\n  \n  lowp vec3 tintRaiseShadowsCurve(lowp vec3 color) {\n    return vec3(-0.003671) * pow(color, vec3(3.0)) + vec3(0.3842) * pow(color, vec3(2.0)) + vec3(0.3764) * color + vec3(0.2515);\n  }\n  \n  lowp vec3 tintShadows(lowp vec3 texel, lowp vec3 tintColor, lowp float tintAmount) {\n    return clamp(mix(texel, mix(texel, tintRaiseShadowsCurve(texel), tintColor), tintAmount), 0.0, 1.0);\n  }\n  \n  lowp vec3 tintHighlights(lowp vec3 texel, lowp vec3 tintColor, lowp float tintAmount) {\n    return clamp(mix(texel, mix(texel, vec3(1.0) - tintRaiseShadowsCurve(vec3(1.0) - texel), (vec3(1.0) - tintColor)), tintAmount), 0.0, 1.0);\n  }\n  \n  highp vec4 rnm(in highp vec2 tc) {\n    highp float noise = sin(dot(tc, vec2(12.9898, 78.233))) * 43758.5453;\n    return vec4(fract(noise), fract(noise * 1.2154), fract(noise * 1.3453), fract(noise * 1.3647)) * 2.0 - 1.0;\n  }\n  \n  highp float fade(in highp float t) {\n    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);\n  }\n  \n  highp float pnoise3D(in highp vec3 p) {\n    highp vec3 pi = permTexUnit * floor(p) + permTexUnitHalf;\n    highp vec3 pf = fract(p);\n    highp float perm = rnm(pi.xy).a;\n    \n    highp float n000 = dot(rnm(vec2(perm, pi.z)).rgb * 4.0 - 1.0, pf);\n    highp float n001 = dot(rnm(vec2(perm, pi.z + permTexUnit)).rgb * 4.0 - 1.0, pf - vec3(0.0, 0.0, 1.0));\n    \n    perm = rnm(pi.xy + vec2(0.0, permTexUnit)).a;\n    \n    highp float n010 = dot(rnm(vec2(perm, pi.z)).rgb * 4.0 - 1.0, pf - vec3(0.0, 1.0, 0.0));\n    highp float n011 = dot(rnm(vec2(perm, pi.z + permTexUnit)).rgb * 4.0 - 1.0, pf - vec3(0.0, 1.0, 1.0));\n    \n    perm = rnm(pi.xy + vec2(permTexUnit, 0.0)).a;\n    \n    highp float n100 = dot(rnm(vec2(perm, pi.z)).rgb * 4.0 - 1.0, pf - vec3(1.0, 0.0, 0.0));\n    highp float n101 = dot(rnm(vec2(perm, pi.z + permTexUnit)).rgb * 4.0 - 1.0, pf - vec3(1.0, 0.0, 1.0));\n    \n    perm = rnm(pi.xy + vec2(permTexUnit, permTexUnit)).a;\n    \n    highp float n110 = dot(rnm(vec2(perm, pi.z)).rgb * 4.0 - 1.0, pf - vec3(1.0, 1.0, 0.0));\n    highp float n111 = dot(rnm(vec2(perm, pi.z + permTexUnit)).rgb * 4.0 - 1.0, pf - vec3(1.0, 1.0, 1.0));\n    \n    highp vec4 n_x = mix(vec4(n000, n001, n010, n011), vec4(n100, n101, n110, n111), fade(pf.x));\n    highp vec2 n_xy = mix(n_x.xy, n_x.zw, fade(pf.y));\n    \n    return mix(n_xy.x, n_xy.y, fade(pf.z));\n  }\n  \n  lowp vec2 coordRot(in lowp vec2 tc, in lowp float angle) {\n    return vec2(((tc.x * 2.0 - 1.0) * cos(angle) - (tc.y * 2.0 - 1.0) * sin(angle)) * 0.5 + 0.5, ((tc.y * 2.0 - 1.0) * cos(angle) + (tc.x * 2.0 - 1.0) * sin(angle)) * 0.5 + 0.5);\n  }\n  \n  void main() {\n    lowp vec4 source = texture(sTexture, texCoord);\n    lowp vec4 result = source;\n  \n    const lowp float toolEpsilon = 0.005;\n    if (skipTone < toolEpsilon) {\n      result = vec4(applyRGBCurve(hslToRgb(applyLuminanceCurve(rgbToHsl(result.rgb)))), result.a);\n    }\n  \n    mediump float hsLuminance = dot(result.rgb, hsLuminanceWeighting);\n\n    mediump float shadow = clamp((pow(hsLuminance, 1.0 / shadows) + (-0.76) * pow(hsLuminance, 2.0 / shadows)) - hsLuminance, 0.0, 1.0);\n\n    mediump float highlight = clamp((1.0 - (pow(1.0 - hsLuminance, 1.0 / (2.0 - highlights)) + (-0.8) * pow(1.0 - hsLuminance, 2.0 / (2.0 - highlights)))) - hsLuminance, -1.0, 0.0);\n\n    lowp vec3 hsresult = vec3(0.0, 0.0, 0.0) + ((hsLuminance + shadow + highlight) - 0.0) * ((result.rgb - vec3(0.0, 0.0, 0.0)) / (hsLuminance - 0.0));\n\n    mediump float contrastedLuminance = ((hsLuminance - 0.5) * 1.5) + 0.5;\n    mediump float whiteInterp = contrastedLuminance * contrastedLuminance * contrastedLuminance;\n    mediump float whiteTarget = clamp(highlights, 1.0, 2.0) - 1.0;\n    hsresult = mix(hsresult, vec3(1.0), whiteInterp * whiteTarget);\n    mediump float invContrastedLuminance = 1.0 - contrastedLuminance;\n    mediump float blackInterp = invContrastedLuminance * invContrastedLuminance * invContrastedLuminance;\n    mediump float blackTarget = 1.0 - clamp(shadows, 0.0, 1.0);\n\n    hsresult = mix(hsresult, vec3(0.0), blackInterp * blackTarget);\n\n    result = vec4(hsresult.rgb, result.a);\n    result = vec4(clamp(((result.rgb - vec3(0.5)) * contrast + vec3(0.5)), 0.0, 1.0), result.a);\n\n    if (abs(fadeAmount) > toolEpsilon) {\n        result.rgb = fadeAdjust(result.rgb, fadeAmount);\n    }\n\n    lowp float satLuminance = dot(result.rgb, satLuminanceWeighting);\n    lowp vec3 greyScaleColor = vec3(satLuminance);\n    result = vec4(clamp(mix(greyScaleColor, result.rgb, saturation), 0.0, 1.0), result.a);\n\n    if (abs(shadowsTintIntensity) > toolEpsilon) {\n      result.rgb = tintShadows(result.rgb, shadowsTintColor, shadowsTintIntensity * 2.0);\n    }\n\n    if (abs(highlightsTintIntensity) > toolEpsilon) {\n      result.rgb = tintHighlights(result.rgb, highlightsTintColor, highlightsTintIntensity * 2.0);\n    }\n\n    if (abs(exposure) > toolEpsilon) {\n      mediump float mag = exposure * 1.045;\n      mediump float exppower = 1.0 + abs(mag);\n      if (mag < 0.0) {\n          exppower = 1.0 / exppower;\n      }\n      result.r = 1.0 - pow((1.0 - result.r), exppower);\n      result.g = 1.0 - pow((1.0 - result.g), exppower);\n      result.b = 1.0 - pow((1.0 - result.b), exppower);\n    }\n\n    if (abs(warmth) > toolEpsilon) {\n      highp vec3 yuvVec;\n      if (warmth > 0.0) {\n          yuvVec = vec3(0.1765, -0.1255, 0.0902);\n      } else {\n          yuvVec = -vec3(0.0588, 0.1569, -0.1255);\n      }\n      highp vec3 yuvColor = rgbToYuv(result.rgb);\n      highp float luma = yuvColor.r;\n      highp float curveScale = sin(luma * 3.14159);\n      yuvColor += 0.375 * warmth * curveScale * yuvVec;\n      result.rgb = yuvToRgb(yuvColor);\n    }\n\n    if (abs(grain) > toolEpsilon) {\n      highp vec3 rotOffset = vec3(1.425, 3.892, 5.835);\n      highp vec2 rotCoordsR = coordRot(texCoord, rotOffset.x);\n      highp vec3 noise = vec3(pnoise3D(vec3(rotCoordsR * vec2(width / grainsize, height / grainsize), 0.0)));\n      lowp vec3 lumcoeff = vec3(0.299, 0.587, 0.114);\n      lowp float luminance = dot(result.rgb, lumcoeff);\n      lowp float lum = smoothstep(0.2, 0.0, luminance);\n      lum += luminance;\n      noise = mix(noise, vec3(0.0), pow(lum, 4.0));\n      result.rgb = result.rgb + noise * grain;\n    }\n\n    if (abs(vignette) > toolEpsilon) {\n      const lowp float midpoint = 0.7;\n      const lowp float fuzziness = 0.62;\n      lowp float radDist = length(texCoord - 0.5) / sqrt(0.5);\n      lowp float mag = easeInOutSigmoid(radDist * midpoint, fuzziness) * vignette * 0.645;\n      result.rgb = mix(pow(result.rgb, vec3(1.0 / (1.0 - mag))), vec3(0.0), mag * mag);\n    }\n\n    fragColor = result;\n  }\n`.trim();\n","import {adjustmentsFrag} from './shaders/adjustmentsFrag';\nimport {defaultVert} from './shaders/defaultVert';\nimport {createProgram} from './utils/createProgram';\nimport {createEmptyTexture} from './utils/texture';\nimport {render2d} from './utils/render';\nimport {Texture} from './webgl'\nimport {MediaEditorRenderingContext} from './context'\n\nconst floatParams = [\n  'width',\n  'height',\n  'exposure',\n  'contrast',\n  'saturation',\n  'warmth',\n  'fadeAmount',\n  'highlights',\n  'shadows',\n  'vignette',\n  'grain'\n] as const\n\ntype AdjustmentsParams = {\n  [key in typeof floatParams[number]]: number\n}\n\nexport const createAdjustmentsProgram = (ctx: MediaEditorRenderingContext) => {\n  const {gl, mapVertices} = ctx\n\n  const program = createProgram(gl, defaultVert, adjustmentsFrag)\n\n  const vertexPositionLoc = gl.getAttribLocation(program, 'aVertexPosition')\n  const texCoordLoc = gl.getAttribLocation(program, 'aTextureCoord')\n\n  const uSamplerLoc = gl.getUniformLocation(program, 'sTexture')\n\n  // curvesImage\n\n  const skipToneLoc = gl.getUniformLocation(program, 'skipTone')\n\n  // shadowsTintIntensity\n  // shadowsTintColor\n  // highlightsTintIntensity\n  // highlightsTintColor\n\n  const floatsLocs = floatParams.map(param => gl.getUniformLocation(program, param))\n\n  return ({input, params}: {\n    input: Texture,\n    params: AdjustmentsParams\n  }) => {\n    const prevTexture = gl.getParameter(gl.TEXTURE_BINDING_2D);\n    const prevFramebuffer = gl.getParameter(gl.FRAMEBUFFER_BINDING);\n    const prevProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n\n    gl.useProgram(program)\n\n    const outputTexture = createEmptyTexture(gl, input.width, input.height)\n\n    const framebuffer = gl.createFramebuffer()\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer)\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, outputTexture, 0)\n    gl.viewport(0, 0, input.width, input.height)\n\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, input.texture)\n\n    gl.uniform1i(uSamplerLoc, 0) // texture unit 0\n\n    floatParams.forEach((param, i) => {\n      gl.uniform1f(floatsLocs[i], params[param])\n    })\n\n    gl.uniform1f(skipToneLoc, 1)\n\n    mapVertices(vertexPositionLoc, texCoordLoc)\n\n    render2d(gl)\n\n    gl.bindTexture(gl.TEXTURE_2D, prevTexture)\n    gl.bindFramebuffer(gl.FRAMEBUFFER, prevFramebuffer)\n    gl.useProgram(prevProgram)\n\n    return outputTexture\n  }\n}\n","import {Texture} from '../webgl/webgl'\nimport {MediaEditorValues} from '../mediaEditorValues'\nimport {createAdjustmentsProgram} from '../webgl/adjustmentsProgram'\nimport {MediaEditorRenderingContext} from '../webgl/context'\n\nexport function createAdjustmentsPass(ctx: MediaEditorRenderingContext): (input: Texture, values: MediaEditorValues) => Texture  {\n  const adjustmentProgram = createAdjustmentsProgram(ctx)\n\n  return (input: Texture, {filters}: MediaEditorValues) => {\n    const output = adjustmentProgram({\n      input,\n      params: {\n        width: input.width,\n        height: input.height,\n        exposure: filters.brightness / 100,\n        contrast: filters.contrast / 100 * 0.3 + 1,\n        saturation: (() => {\n          let v = filters.saturation / 100\n          if(v > 0) {\n            v *= 1.05\n          }\n          return v + 1\n        })(),\n        warmth: filters.warmth / 100,\n        fadeAmount: filters.fade / 100,\n        highlights: (filters.highlights * 0.75 + 100) / 100,\n        shadows: (filters.shadows * 0.55 + 100) / 100,\n        vignette: filters.vignette / 100,\n        grain: filters.grain / 100 * 0.04\n      }\n    })\n\n    // return input\n    return {\n      texture: output,\n      width: input.width,\n      height: input.height\n    }\n  }\n}\n","// language=GLSL\nexport const sharpenVert = `\n  #version 300 es \n\n  uniform highp float inputWidth;\n  uniform highp float inputHeight;\n  \n  in vec4 position;\n  in vec2 inputTexCoord;\n\n  out vec2 vTextureCoord;\n  \n  out vec2 leftTexCoord;\n  out vec2 rightTexCoord;\n  out vec2 topTexCoord;\n  out vec2 bottomTexCoord;\n\n  void main() {\n    gl_Position = position;\n    vTextureCoord = inputTexCoord;\n    \n    highp vec2 widthStep = vec2(1.0 / inputWidth, 0.0);\n    highp vec2 heightStep = vec2(0.0, 1.0 / inputHeight);\n    \n    leftTexCoord = inputTexCoord - widthStep;\n    rightTexCoord = inputTexCoord + widthStep;\n    topTexCoord = inputTexCoord + heightStep;\n    bottomTexCoord = inputTexCoord - heightStep;\n  }\n`.trim();\n","// language=GLSL\nexport const sharpenFrag = `\n  #version 300 es \n  precision highp float;\n  \n  uniform sampler2D sTexture;\n  uniform float sharpen;\n\n  in vec2 vTextureCoord;\n  in vec2 leftTexCoord;\n  in vec2 rightTexCoord;\n  in vec2 topTexCoord;\n  in vec2 bottomTexCoord;\n  \n  out vec4 fragColor;\n\n  void main() {\n    vec4 result = texture(sTexture, vTextureCoord);\n\n    vec3 leftTextureColor = texture(sTexture, leftTexCoord).rgb;\n    vec3 rightTextureColor = texture(sTexture, rightTexCoord).rgb;\n    vec3 topTextureColor = texture(sTexture, topTexCoord).rgb;\n    vec3 bottomTextureColor = texture(sTexture, bottomTexCoord).rgb;\n    \n    result.rgb = result.rgb * (1.0 + 4.0 * sharpen) - (leftTextureColor + rightTextureColor + topTextureColor + bottomTextureColor) * sharpen;\n\n    fragColor = result;\n  }\n`.trim();\n","import {MediaEditorRenderingContext} from './context'\nimport {createProgram} from './utils/createProgram'\nimport {sharpenVert} from './shaders/sharpenVert'\nimport {sharpenFrag} from './shaders/sharpenFrag'\nimport {Texture} from './webgl'\nimport {createEmptyTexture} from './utils/texture'\n\nexport const createSharpenProgram = (ctx: MediaEditorRenderingContext) => {\n  const {gl, mapVertices} = ctx\n\n  const program = createProgram(gl, sharpenVert, sharpenFrag)\n\n  const vertexPositionLoc = gl.getAttribLocation(program, 'position')\n  const texCoordLoc = gl.getAttribLocation(program, 'inputTexCoord')\n\n  const uSamplerLoc = gl.getUniformLocation(program, 'sTexture')\n\n  const inputWidthLoc = gl.getUniformLocation(program, 'inputWidth')\n  const inputHeightLoc = gl.getUniformLocation(program, 'inputHeight')\n\n  const sharpenLoc = gl.getUniformLocation(program, 'sharpen')\n\n  return ({input, sharpen}: {\n    input: Texture,\n    sharpen: number\n  }) => {\n    const prevTexture = gl.getParameter(gl.TEXTURE_BINDING_2D);\n    const prevFramebuffer = gl.getParameter(gl.FRAMEBUFFER_BINDING);\n    const prevProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n\n    gl.useProgram(program)\n\n    const outputTexture = createEmptyTexture(gl, input.width, input.height)\n\n    const framebuffer = gl.createFramebuffer()\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer)\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, outputTexture, 0)\n    gl.viewport(0, 0, input.width, input.height)\n\n    gl.activeTexture(gl.TEXTURE0)\n    gl.bindTexture(gl.TEXTURE_2D, input.texture)\n\n    gl.uniform1i(uSamplerLoc, 0)\n\n    gl.uniform1f(inputWidthLoc, input.width)\n    gl.uniform1f(inputHeightLoc, input.height)\n\n    gl.uniform1f(sharpenLoc, sharpen)\n\n    mapVertices(vertexPositionLoc, texCoordLoc)\n\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\n\n    gl.bindTexture(gl.TEXTURE_2D, prevTexture)\n    gl.bindFramebuffer(gl.FRAMEBUFFER, prevFramebuffer)\n    gl.useProgram(prevProgram)\n\n    return outputTexture\n  }\n}\n","import {MediaEditorRenderingContext} from '../webgl/context'\nimport {Texture} from '../webgl/webgl'\nimport {createSharpenProgram} from '../webgl/sharpenProgram'\nimport {MediaEditorValues} from '../mediaEditorValues'\n\nexport function createSharpenPass(ctx: MediaEditorRenderingContext): (input: Texture, values: MediaEditorValues) => Texture {\n  const sharpenProgram = createSharpenProgram(ctx)\n\n  return (input: Texture, values) => {\n    const output = sharpenProgram({\n      input,\n      sharpen: 0.11 + values.filters.sharpen / 100 * 0.6\n    })\n\n    return {\n      texture: output,\n      width: input.width,\n      height: input.height\n    }\n  }\n}\n","import {MediaEditorValues} from './mediaEditorValues'\nimport {createImageTexture} from './webgl/utils/imageTexture'\nimport {Texture} from './webgl/webgl'\nimport {createDefaultProgram} from './webgl/defaultProgram'\nimport {initVertices} from './webgl/vertex'\nimport {render2d} from './webgl/utils/render'\nimport {MediaEditorRenderingContext} from './webgl/context'\nimport {createEnhancePass} from './processors/enhancePass'\nimport {createAdjustmentsPass} from './processors/adjustmentsPass'\nimport {createSharpenPass} from './processors/sharpenPass'\n\n// --isolated-modules\nexport {}\n\ntype EvtData = {\n  type: 'requestFrame'\n  bitmap: ImageBitmap\n  values: MediaEditorValues\n}\n\nconst canvas = new OffscreenCanvas(1, 1)\nconst gl = canvas.getContext('webgl2') as WebGL2RenderingContext\n\nconst vertices = initVertices(gl)\n\nconst ctx: MediaEditorRenderingContext = {\n  gl,\n  mapVertices: (vLoc: number, tLoc: number, r: 'direct' | 'invert' = 'direct') => {\n    gl.bindBuffer(gl.ARRAY_BUFFER, r === 'direct' ? vertices.direct() : vertices.invert())\n    gl.enableVertexAttribArray(vLoc)\n    gl.vertexAttribPointer(vLoc, 2, gl.FLOAT, false, 8, 0)\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertices.tex())\n    gl.enableVertexAttribArray(tLoc)\n    gl.vertexAttribPointer(tLoc, 2, gl.FLOAT, false, 8, 0)\n  }\n}\n\nconst defaultProgram = createDefaultProgram(ctx, 'direct')\nfunction renderToCanvas(texture: Texture) {\n  const prevFramebuffer = gl.getParameter(gl.FRAMEBUFFER_BINDING);\n  const prevTexture = gl.getParameter(gl.TEXTURE_BINDING_2D);\n  const prevProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n\n  defaultProgram.use()\n\n  gl.activeTexture(gl.TEXTURE0)\n  gl.bindTexture(gl.TEXTURE_2D, texture.texture)\n\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null)\n  gl.viewport(0, 0, canvas.width, canvas.height)\n\n  canvas.width = texture.width\n  canvas.height = texture.height\n  render2d(gl)\n\n  gl.bindFramebuffer(gl.FRAMEBUFFER, prevFramebuffer)\n  gl.bindTexture(gl.TEXTURE_2D, prevTexture)\n  gl.useProgram(prevProgram)\n}\n\nconst enhancePass = createEnhancePass(ctx)\nconst adjustmentsPass = createAdjustmentsPass(ctx)\nconst sharpenPass = createSharpenPass(ctx)\n\nfunction renderFrame(bitmap: ImageBitmap, values: MediaEditorValues) {\n  const image = createImageTexture(gl, bitmap)\n  const enhanced = enhancePass(image, values)\n  const adjusted = adjustmentsPass(enhanced, values);\n  const sharpened = sharpenPass(adjusted, values)\n  renderToCanvas(sharpened)\n  return createImageBitmap(canvas)\n}\n\naddEventListener('message', (event) => {\n  const data: EvtData = event.data\n\n  switch(data.type) {\n    case 'requestFrame':\n      renderFrame(data.bitmap, data.values).then((imageBitmap) => {\n        postMessage({type: 'frameReady', bitmap: imageBitmap}, [imageBitmap])\n      })\n      break\n  }\n})\n"],"names":["createImageTexture","gl","img","currentTexture","texture","createProgram","vertSource","fragSource","vertShader","fragShader","program","defaultVert","defaultFrag","createDefaultProgram","ctx","vertexDirection","mapVertices","uSamplerLoc","vertexPositionLoc","texCoordLoc","use","lazy","fn","value","directVertices","invertVertices","texVertices","createVertexBuffer","vertices","vertexBuffer","initVertices","render2d","createLUTGenerator","binCount","gridWidth","gridHeight","totalSegments","defaultClipLimit","input","prevTexture","prevFramebuffer","framebuffer","inputBuffer","tileWidth","tileHeight","tileArea","clipLimit","scale","bytesPerRow","hist","cdfs","cdfsMin","cdfsMax","xMul","yMul","y","yOffset","index","tx","t","i","clipped","j","redistBatch","residual","hMin","cdf","resultSize","resultBytesPerRow","result","tile","resultTexture","createEmptyTexture","width","height","params","internalFormat","format","minFilter","magFilter","wrapS","wrapT","outputTexture","enhanceColorLookupFrag","createEnhanceColorLookupProgram","colorSamplerLoc","lutSamplerLoc","intensityLoc","lutTexture","intensity","prevProgram","rgbToHsvFrag","createColorConvertProgram","histBinCount","createEnhancePass","colorConvertProgram","generateLUT","enhanceColorLookupProgram","values","hsvTexture","lookupTexture","adjustmentsFrag","floatParams","createAdjustmentsProgram","skipToneLoc","floatsLocs","param","createAdjustmentsPass","adjustmentProgram","filters","v","sharpenVert","sharpenFrag","createSharpenProgram","inputWidthLoc","inputHeightLoc","sharpenLoc","sharpen","createSharpenPass","sharpenProgram","canvas","vLoc","tLoc","r","defaultProgram","renderToCanvas","enhancePass","adjustmentsPass","sharpenPass","renderFrame","bitmap","image","enhanced","adjusted","sharpened","event","data","imageBitmap"],"mappings":"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"}